plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}
group 'fr.techad'
version '1.3.0'
sourceCompatibility = 1.8
//Used to be able to add dependencies to jar
configurations.implementation.setCanBeResolved(true)
configurations.api.setCanBeResolved(true)

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")
ext.signArtefact = project.hasProperty('ossrhUsername')

repositories {
    mavenCentral()
    mavenLocal()
}
dependencies {
    // light-4j
    implementation 'com.networknt:server:2.0.32' 
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'commons-io:commons-io:2.6'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.lucene:lucene-core:7.3.1'
    implementation 'org.apache.lucene:lucene-queryparser:7.3.1'
    implementation 'org.jsoup:jsoup:1.11.3'
    implementation 'com.auth0:java-jwt:3.18.2'
    implementation 'net.lingala.zip4j:zip4j:2.9.0'
    implementation 'org.json:json:20160810'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation 'org.mockito:mockito-all:1.9.5'
}
//Jar creation
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
                'Main-Class': 'fr.techad.edc.httpd.EdcWebServer'
        )
    }
from {
    configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) }
  }
}
//Execute Junit tests
test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'edc-httpd'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            //Creating the pom
            pom {
                name = 'edc httpd'
                description = 'Embedded httpd server to serve the help documentation published by edc'
                url = 'https://www.easydoccontents.com'
                licenses {
                    license {
                         name = 'MIT License'
                         url = 'http://www.opensource.org/licenses/mit-license.php'
                         distribution =  'repo'
                    }
                }
                developers {
                    developer {
                    name = 'Gregory Cochin'
                    email= 'gregory.cochin@tech-advantage.com'
                    }                    
                    developer {
                    name = 'Mathieu Benard'
                    email= 'mathieu.benard@tech-advantage.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/tech-advantage/edc-httpd-java.git'
                    developerConnection = 'scm:git:ssh://github.com/tech-advantage/edc-httpd-java.git'
                    url = 'https://github.com/tech-advantage/edc-httpd-java'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}
signing {
    setRequired {
        // signing is only required if the artifacts are to be published
        gradle.taskGraph.allTasks.any { it.equals( PublishToMavenRepository)     }
    sign publishing.publications.mavenJava
    sign configurations.archives
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}
artifacts {
    archives sourcesJar
    archives javadocJar
}
javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

task install(dependsOn: publishToMavenLocal) {
    group = 'Publishing'
    description = 'Installs artifacts to local Maven repository'
}

task release() {
    group 'Project'
    description 'Build project as release.'

    dependsOn build
    dependsOn javadoc
}

tasks.publish {
    dependsOn(project.tasks.build)
}
tasks.install {
    dependsOn(project.tasks.build)
}
